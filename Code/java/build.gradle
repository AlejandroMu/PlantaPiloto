// plugins {
//     id 'org.hidetake.ssh' version '2.11.2' apply false
// }
subprojects{
    apply plugin: 'java'
    apply plugin: 'application'
    // apply plugin: 'org.hidetake.ssh'
    apply plugin: 'jacoco'
   
    jacoco {
        toolVersion = '0.8.7'
    }

    test{
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.enabled true // Habilitar generación de informe XML de cobertura
            html.enabled true // Deshabilitar generación de informe HTML (opcional)
            csv.enabled false // Deshabilitar generación de informe CSV (opcional)
            xml.destination file("$buildDir/reports/jacoco/jacoco.xml")
        }
        // // Ruta y nombre del archivo XML de cobertura
    }
    java {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }


    repositories {
        mavenCentral()
    }

    dependencies{
        implementation 'com.zeroc:ice:3.7.9'
    }

    // remotes {
    //     dirver {
    //         role 'plcDriver'
    //         host = '10.147.19.1'
    //         user = project.property("rio.user")
    //         password = project.property("rio.password")
    //     }
    //     dummy {
    //         role 'dummyDriver'
    //         host = 'xhgrid19'
    //         user = project.property("lab1.user")
    //         password = project.property("lab1.password")
    //     }
    //     manager {
    //         role 'managerServer'
    //         host = 'xhgrid20'
    //         user = project.property("lab1.user")
    //         password = project.property("lab1.password")
    //     }
    // }

    task cleanBin(type: Delete){
        delete "${projectDir}/bin"
    }
    clean.finalizedBy(cleanBin)

    task cleanZip(type: Delete){
        delete "$rootDir/distributable/${project.name}.zip"
    }
    task copyToLib(type: Copy) {
        into "${buildDir}/libs"
        from configurations.runtimeClasspath
        dependsOn build

    }
    task comprimir(type: Zip){
        from "$buildDir/libs/"
        archiveName "${project.name}.zip"
        destinationDir(file("$rootDir/distributable"))
        dependsOn copyToLib
        dependsOn cleanZip
    }
    // task deploy {
    //     doLast {
    //         def remoteFolder = "planta/${project.name}"
    //         def machines = remotes.role("$project.name")
    //         def mainClass = "$mainClassName"

    //         if(!machines.isEmpty() && !mainClass.toString().equals('null')){
    //             ssh.run {
    //                 session(machines) {
    //                     def awkCommand = "ps -ef | awk -F \" \" '\$0 ~ /.*$mainClass.*/ && \$8 ~ /java/ {print \$2}'"
    //                     println "awkCommand: $awkCommand"
    //                     def processId = execute "$awkCommand"
    //                     if(!processId.isBlank()){
    //                         execute "kill -9 $processId"
    //                         println "kill process $processId"
    //                     }
    //                     execute "rm -rf $remoteFolder"
    //                     execute "mkdir -p $remoteFolder"
    //                     put from: "$rootDir/distributable/${project.name}.zip", into: "$remoteFolder/"
    //                     execute "cd $remoteFolder && unzip ${project.name}.zip"
                       
    //                     def fileprops = "-props prod.properties"
    //                     def nohupCommand = "nohup java -cp \"$remoteFolder/*\" $mainClass ${fileprops} > $remoteFolder/${project.name}.out 2>&1 &"
    //                     println "nohupCommand: $nohupCommand"
    //                     def nohupOut = execute "$nohupCommand"
    //                     println "nohupCommandOut: $nohupOut"
    //                     def outPutContent = "cat $remoteFolder/${project.name}.out"
    //                     execute "$outPutContent"

    //                 }
    //             }
    //         }
    //     }
    //     dependsOn comprimir 
    // }

}